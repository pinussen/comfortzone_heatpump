#include "comfortzone_heatpump.h"
#include "comfortzone_config.h"
#include "comfortzone_frame.h"
#include "comfortzone_status.h"

#include "comfortzone_decoder_basic.h"
#include "comfortzone_decoder_status.h"

#include "comfortzone_crafting.h"

static byte cz_buf[256];
static uint16_t cz_size = 0;		// #bytes in cz_buf
static uint16_t cz_full_frame_size = -1;	// #bytes in the current frame

COMFORTZONE_STATUS comfortzone_status;

static KNOWN_REGISTER kr_decoder[] =
	{
		// don't know why but extra hot water off does not use the same message as extra hot water on
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x41, 0x19, 0x00}, KR_EXTRA_HOT_WATER_ON, "Extra hot water - off", czdec_cmd_r_generic, czdec_cmd_w_extra_hot_water, czdec_reply_r_extra_hot_water, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x81, 0x19, 0x00}, KR_EXTRA_HOT_WATER_OFF, "Extra hot water - on", czdec_cmd_r_generic, czdec_cmd_w_extra_hot_water, czdec_reply_r_extra_hot_water, czdec_reply_w_generic},

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x81, 0x29, 0x00}, KR_UNCRAFTABLE, "Clear alarm", czdec_cmd_r_generic, czdec_cmd_w_clr_alarm, czdec_reply_r_clr_alarm, czdec_reply_w_generic},

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x40, 0x00, 0x00}, KR_UNCRAFTABLE, "Daylight saving - on", czdec_cmd_r_generic, czdec_cmd_w_daylight_saving, czdec_reply_r_daylight_saving, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x80, 0x00, 0x00}, KR_UNCRAFTABLE, "Daylight saving - off", czdec_cmd_r_generic, czdec_cmd_w_daylight_saving, czdec_reply_r_daylight_saving, czdec_reply_w_generic},

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x80, 0x0E, 0x00}, KR_UNCRAFTABLE, "Sanitary priority", czdec_cmd_r_generic, czdec_cmd_w_sanitary_priority, czdec_reply_r_sanitary_priority, czdec_reply_w_generic},

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x00, 0x00}, KR_UNCRAFTABLE, "Status 09", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_09, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x00, 0x04}, KR_FAN_SPEED, "Fan speed", czdec_cmd_r_generic, czdec_cmd_w_fan_speed, czdec_reply_r_fan_speed, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x05, 0x04}, KR_UNCRAFTABLE, "Fan boost increase", czdec_cmd_r_generic, czdec_cmd_w_percentage, czdec_reply_r_percentage, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x16, 0x02}, KR_UNCRAFTABLE, "Status 11", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_11, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x17, 0x04}, KR_UNCRAFTABLE, "Supply fan T12 adjust", czdec_cmd_r_generic, czdec_cmd_w_percentage, czdec_reply_r_percentage, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x19, 0x00}, KR_UNCRAFTABLE, "Status 24", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_24, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x2E, 0x03}, KR_UNCRAFTABLE, "Minimal return temperature", czdec_cmd_r_generic, czdec_cmd_w_temp, czdec_reply_r_temp, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x29, 0x04}, KR_UNCRAFTABLE, "Chauffage - compressor max frequency", czdec_cmd_r_generic, czdec_cmd_w_freq, czdec_reply_r_freq, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x2C, 0x04}, KR_UNCRAFTABLE, "Status 12", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_12, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x35, 0x04}, KR_UNCRAFTABLE, "Heatpump - compressor - blocked frequency 1", czdec_cmd_r_generic, czdec_cmd_w_freq, czdec_reply_r_freq, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x37, 0x04}, KR_UNCRAFTABLE, "Heatpump - compressor - blocked frequency 2", czdec_cmd_r_generic, czdec_cmd_w_freq, czdec_reply_r_freq, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x39, 0x04}, KR_UNCRAFTABLE, "Heatpump - compressor - blocked frequency 3", czdec_cmd_r_generic, czdec_cmd_w_freq, czdec_reply_r_freq, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x64, 0x01}, KR_UNCRAFTABLE, "Status 25", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_25, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7A, 0x03}, KR_UNCRAFTABLE, "Status 01", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_01, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7B, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE0 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7C, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE1 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},	// not tested
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7D, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE2 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},	// not tested
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7D, 0x03}, KR_HOT_WATER_TEMP, "Hot water calculated setting", czdec_cmd_r_generic, czdec_cmd_w_temp, czdec_reply_r_temp, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7E, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE3 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},	// not tested
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x7F, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE4 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},	// not tested
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x80, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE5 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},	// not tested
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x81, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE6 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},	// not tested
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0x82, 0x00}, KR_UNCRAFTABLE, "Hardware Settings - Adjustments - TE7 Adjust", czdec_cmd_r_generic, czdec_cmd_w_temp_1byte, czdec_reply_r_temp_1byte, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xA6, 0x04}, KR_UNCRAFTABLE, "Heatpump - defrost delay", czdec_cmd_r_generic, czdec_cmd_w_time, czdec_reply_r_time, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xA7, 0x02}, KR_LED_LUMINOSITY, "LED luminosity", czdec_cmd_r_generic, czdec_cmd_w_digit, czdec_reply_r_digit, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xAC, 0x02}, KR_UNCRAFTABLE, "Holiday reduction", czdec_cmd_r_generic, czdec_cmd_w_day_delay, czdec_reply_r_day_delay, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xC8, 0x02}, KR_UNCRAFTABLE, "Status 10", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_10, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xB0, 0x02}, KR_ROOM_HEATING_TEMP, "Heating calculated setting", czdec_cmd_r_generic, czdec_cmd_w_temp, czdec_reply_r_temp, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xB2, 0x00}, KR_UNCRAFTABLE, "Status 23", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_23, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x00, 0xDE, 0x04}, KR_UNCRAFTABLE, "Status 13", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_13, czdec_reply_w_generic},	// 0x63 bytes

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x00, 0x00}, KR_UNCRAFTABLE, "Status 02", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_02, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x04, 0x00}, KR_UNCRAFTABLE, "Hour", czdec_cmd_r_generic, czdec_cmd_w_digit, czdec_reply_r_digit, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x05, 0x00}, KR_UNCRAFTABLE, "Minute", czdec_cmd_r_generic, czdec_cmd_w_digit, czdec_reply_r_digit, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x07, 0x00}, KR_UNCRAFTABLE, "Day of Month", czdec_cmd_r_generic, czdec_cmd_w_digit, czdec_reply_r_digit, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x08, 0x00}, KR_UNCRAFTABLE, "Month (1=Jan)", czdec_cmd_r_generic, czdec_cmd_w_digit, czdec_reply_r_digit, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x09, 0x00}, KR_UNCRAFTABLE, "Year (20xx)", czdec_cmd_r_generic, czdec_cmd_w_digit, czdec_reply_r_digit, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x16, 0x02}, KR_UNCRAFTABLE, "Status 05", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_05, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x19, 0x00}, KR_UNCRAFTABLE, "Status 22", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_22, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x2C, 0x04}, KR_UNCRAFTABLE, "Status 14", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_14, czdec_reply_w_generic},	// 0x48 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x58, 0x04}, KR_UNCRAFTABLE, "Language", czdec_cmd_r_generic, czdec_cmd_w_language, czdec_reply_r_language, czdec_reply_w_generic},
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x64, 0x01}, KR_UNCRAFTABLE, "Status 04", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_04, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0x7A, 0x03}, KR_UNCRAFTABLE, "Status 07", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_07, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0xB2, 0x00}, KR_UNCRAFTABLE, "Status 03", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_03, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x01, 0xC8, 0x02}, KR_UNCRAFTABLE, "Status 06", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_06, czdec_reply_w_generic},	// 0xC2 bytes

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x03, 0x15, 0x0D}, KR_UNCRAFTABLE, "Status 15", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_15, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x03, 0x2B, 0x0F}, KR_UNCRAFTABLE, "Status 18", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_18, czdec_reply_w_generic},	// 0x5D bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x03, 0x79, 0x0E}, KR_UNCRAFTABLE, "Status 17", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_17, czdec_reply_w_generic},	// 0xC2 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x03, 0xC7, 0x0D}, KR_UNCRAFTABLE, "Status 16", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_16, czdec_reply_w_generic},	// 0xC2 bytes

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x04, 0x4E, 0x3F}, KR_UNCRAFTABLE, "Status 20", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_20, czdec_reply_w_generic},	// 0x26 bytes
		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x04, 0x9C, 0x3E}, KR_UNCRAFTABLE, "Status 19", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_19, czdec_reply_w_generic},	// 0xC2 bytes

		{ {0x01, 0x02, 0x03, 0x04, 0x0B, 0x07, 0x05, 0x00, 0x00}, KR_UNCRAFTABLE, "Status 08", czdec_cmd_r_generic, czdec_empty, czdec_reply_r_status_08, czdec_reply_w_generic},	// 0x50 bytes


		{ {0}, KR_UNCRAFTABLE, NULL, NULL, NULL, NULL, NULL}
	};

// convert a craftname into index into kr_decoder_array
static int kr_craft_name_to_index(KNOWN_REGISTER_CRAFT_NAME reg_cname)
{
	int i;

	while(kr_decoder[i].reg_name != NULL)
	{
		if(reg_cname == kr_decoder[i].reg_cname)
		{
			return i;
		}

		i++;
	}

	DPRINT("kr_craft_name_to_index failed to find craftname ");
	DPRINTLN(reg_cname);

	return -1;
}

static void dump_frame(const char *prefix)
{
	int i;

	DPRINTLN("==============================");
	DPRINT(prefix);

	for(i = 0; i < cz_size; i++)
	{
		if(cz_buf[i] < 0x10)
			DPRINT("0");
		DPRINT(cz_buf[i], HEX);

		DPRINT(" ");
	}

	DPRINT(" => ");
	DPRINT(cz_size, HEX);
}



static void comfortzone_process_frame(CZ_PACKET_HEADER *czph)
{
	int i = 0;

	while(kr_decoder[i].reg_name != NULL)
	{
		if(!memcmp(czph->reg_num, kr_decoder[i].reg_num, 9))
		{
			switch(czph->cmd)
			{
				case 'R':
							DPRINT(kr_decoder[i].reg_name);
							DPRINTLN(" (get): ");

							kr_decoder[i].cmd_r(&kr_decoder[i], (R_CMD*)czph);

							DPRINTLN("====================================================");
							return;

				case 'W':
							DPRINT(kr_decoder[i].reg_name);
							DPRINTLN(" (set): ");

							kr_decoder[i].cmd_w(&kr_decoder[i], (W_CMD*)czph);

							DPRINTLN("====================================================");
							return;
												
				case 'r':
							DPRINT(kr_decoder[i].reg_name);
							DPRINTLN(" (reply get): ");

							kr_decoder[i].reply_r(&kr_decoder[i], (R_REPLY*)czph);

							DPRINTLN("====================================================");
							return;

				case 'w':
							DPRINT(kr_decoder[i].reg_name);
							DPRINTLN(" (reply set): ");

							kr_decoder[i].reply_w(&kr_decoder[i], (W_REPLY*)czph);

							DPRINTLN("====================================================");
							return;
			}
		}

		i++;
	}

	DPRINTLN("unknown register");
	dump_frame("UNK:");
}

bool comfortzone_receive(byte input_byte)
{
	// there is no frame header. First we must collect 21 bytes (sizeof (CZ_PACKET_HEADER)).
	// To find start of frame, it is possible to check if the duration between 2 bytes is not too long
	// (= > 8 bits sent @19.2Kbit/s) which is not possible here as the library does not receive data itself
	// and moreover receiver may (should) have a buffer hidding data stream pause.
	// The 2nd solution is to check if 
	//  - unknown variable (byte[5 & 6]) is either {0xD3, 0x5E} (command) or {0x07, 0x8A} (reply)
	//  - and if cmd byte is 'R' or 'W' (in command case) or 'r' or 'w' (in reply case)
	//
	// if not, first byte is discarded

	cz_buf[cz_size++] = input_byte;

	if(cz_size < sizeof(CZ_PACKET_HEADER))
		return false;

	if(cz_size == sizeof(CZ_PACKET_HEADER))
	{
		CZ_PACKET_HEADER *czph = (CZ_PACKET_HEADER *)cz_buf;

		if(
				( (czph->unknown[0] == 0xD3) && (czph->unknown[1] == 0x5E) && ((czph->cmd == 'W') || (czph->cmd == 'R')) )
			||
				( (czph->unknown[0] == 0x07) && (czph->unknown[1] == 0x8A) && ((czph->cmd == 'w') || (czph->cmd == 'r')) )
			)
		{
			cz_full_frame_size = czph->packet_size;
		}
		else
		{
			memcpy(cz_buf, cz_buf + 1, sizeof(CZ_PACKET_HEADER) - 1);
			cz_size--;
			return false;
		}
	}

	if(cz_size != cz_full_frame_size)
	{
		if(cz_size == sizeof(cz_buf))
		{	// something goes wrong. packet size is store in a single byte, how can it goes above 255 ???
			cz_size = 0;
		}

		return false;
	}

	comfortzone_process_frame((CZ_PACKET_HEADER *)cz_buf);
	cz_size = 0;
	return true;
}

// craft one command frame
// input: pointer to output buffer, min size is sizeof(W_CMD) = 30 bytes
//        name of the command to craft
//        parameter of the command (depend on crafted command, see KNOWN_REGISTER_CRAFT_NAME enum)
// output: 0 = uncraftable packet or crafting error else number of bytes used in buffer
uint16_t comfortzone_craft(byte *output_buffer, KNOWN_REGISTER_CRAFT_NAME reg_cname, uint16_t parameter)
{
	int kr_idx;

	kr_idx = kr_craft_name_to_index(reg_cname);

	if(kr_idx == -1)
		return 0;
	
	switch(reg_cname)
	{
		case KR_UNCRAFTABLE:				// uncraftable packet
									break;

#if 0
		case KR_FAN_SPEED:				// set fan speed, parameter => 1=slow, 2=normal, 3=fast
									switch(parameter)
									{
										case 1:
													return cz_craft_w_small_cmd(output_buffer, kr_decoder[kr_idx].reg_num, 0x01, 0x95);
										case 2:
													return cz_craft_w_small_cmd(output_buffer, kr_decoder[kr_idx].reg_num, 0x02, 0x77);
										case 3:
													return cz_craft_w_small_cmd(output_buffer, kr_decoder[kr_idx].reg_num, 0x03, 0x29);
									}
									break;

		case KR_LED_LUMINOSITY:			// set led luminosity, parameter => 0=off to 6=full power
									{
										//                                      vv    vv    vv    vv  invalid value
										static byte led_crc[7] = {0xED, 0xB3, 0x00, 0x00, 0x00, 0x00, 0x30 };

										if(parameter > 6)
											parameter = 6;

										return cz_craft_w_small_cmd(output_buffer, kr_decoder[kr_idx].reg_num, parameter, led_crc[parameter]);
									}
									break;

		case KR_ROOM_HEATING_TEMP:		// set room heating temperature, parameter => 120 (=12.0°) to 240 (=24.0°)
									{
										static byte hwt_crc[800 - 120 +1] =
												{
													// 120 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 140 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 160 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 180 - 
													0x??, 0x??, 0x??, 0xDD, 0xC5, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 200 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 220 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 240 
													0x??
												};

										if(parameter < 120)
											parameter = 120;
										else if(parameter > 240)
											parameter = 240;

										return cz_craft_w_cmd(output_buffer, kr_decoder[kr_idx].reg_num, parameter, rwt_crc[parameter - 120]);
									}
									break;

		case KR_HOT_WATER_TEMP:			// set hot water temperature, parameter => 120 (=12.0°) to 800 (=80.0°)
									{
										static byte hwt_crc[800 - 120 +1] =
												{
													// 120 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 140 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 160 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 180 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 200 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 220 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 240 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 260 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 280 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 300 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 320 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 340 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 360 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 380 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 400 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 420 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 440 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 460 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x9B, 0x??, 0x??, 0x??, 
													// 480 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 500 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 520 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 540 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 560 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 580 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 600 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 620 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 640 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 660 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 680 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 700 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 720 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 740 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 750 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 760 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 780 - 
													0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 0x??, 
													// 800
													0x??
												};

										if(parameter < 120)
											parameter = 120;
										else if(parameter > 800)
											parameter = 800;

										return cz_craft_w_cmd(output_buffer, kr_decoder[kr_idx].reg_num, parameter, hwt_crc[parameter - 120]);
									}
									break;

		case KR_EXTRA_HOT_WATER_ON:	// enable extra hot water, no parameter
									return cz_craft_w_cmd(output_buffer, kr_decoder[kr_idx].reg_num, 0x0001, 0x06);

		case KR_EXTRA_HOT_WATER_OFF:	// disable extra hot water, no parameter
									return cz_craft_w_cmd(output_buffer, kr_decoder[kr_idx].reg_num, 0xFFFE, 0x90);

#endif
	}

	return 0;
}

